"""
Code2Vid - Code Explanation Module
Takes a Python code snippet and generates a clear, engaging explanation using GPT-4.
"""

import os
import json
from typing import Optional, Dict, Any
from openai import OpenAI
from pathlib import Path


class CodeExplainer:
    """Handles code explanation generation using GPT-4."""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the CodeExplainer.
        
        Args:
            api_key: OpenAI API key. If not provided, will look for OPENAI_API_KEY env var.
        """
        self.api_key = api_key or os.getenv("OPENAI_API_KEY")
        if not self.api_key:
            raise ValueError("OpenAI API key is required. Set OPENAI_API_KEY environment variable or pass api_key parameter.")
        
        self.client = OpenAI(api_key=self.api_key)
    
    def explain_code(self, code_snippet: str, language: str = "Python", 
                    difficulty_level: str = "beginner") -> Dict[str, Any]:
        """
        Generate a narrated explanation for a code snippet.
        
        Args:
            code_snippet: The code to explain
            language: Programming language (default: Python)
            difficulty_level: Target audience level (beginner, intermediate, advanced)
            
        Returns:
            Dictionary containing the explanation and metadata
        """
        
        # Create a comprehensive prompt for code explanation
        prompt = f"""
You are an expert programming instructor creating narrated explainer videos for {difficulty_level} developers.

Please explain the following {language} code in a clear, engaging way that would work well as a narrated video script.

Code to explain:
```{language.lower()}
{code_snippet}
```

Your response should be structured as follows:

1. **Title**: A catchy, descriptive title for the video
2. **Overview**: A brief 1-2 sentence overview of what the code does
3. **Step-by-Step Explanation**: Break down the code into logical sections, explaining:
   - What each part does
   - Why it's written this way
   - Any important concepts or patterns used
4. **Key Takeaways**: 2-3 main points the viewer should remember
5. **Narration Script**: A natural, conversational script that flows well when spoken aloud

Make the explanation engaging and accessible for {difficulty_level} developers. Use analogies where helpful, and explain both the "what" and "why" of the code.

Format your response as JSON with these exact keys:
{{
    "title": "string",
    "overview": "string", 
    "step_by_step": ["string"],
    "key_takeaways": ["string"],
    "narration_script": "string"
}}
"""
        
        try:
            response = self.client.chat.completions.create(
                model="gpt-4",
                messages=[
                    {"role": "system", "content": "You are an expert programming instructor who creates engaging, educational content."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.7,
                max_tokens=2000
            )
            
            # Extract the response content
            explanation_text = response.choices[0].message.content.strip()
            
            # Try to parse as JSON, fallback to plain text if needed
            try:
                explanation = json.loads(explanation_text)
            except json.JSONDecodeError:
                # If JSON parsing fails, create a structured response from plain text
                explanation = {
                    "title": f"{language} Code Explanation",
                    "overview": "Code explanation generated by AI",
                    "step_by_step": [explanation_text],
                    "key_takeaways": ["Review the code carefully", "Understand the logic flow"],
                    "narration_script": explanation_text
                }
            
            # Add metadata
            explanation["metadata"] = {
                "language": language,
                "difficulty_level": difficulty_level,
                "code_length": len(code_snippet),
                "model_used": "gpt-4"
            }
            
            return explanation
            
        except Exception as e:
            raise Exception(f"Failed to generate explanation: {str(e)}")
    
    def save_explanation(self, explanation: Dict[str, Any], output_path: str = "explanation.json") -> str:
        """
        Save the explanation to a JSON file.
        
        Args:
            explanation: The explanation dictionary
            output_path: Path to save the explanation
            
        Returns:
            Path where the explanation was saved
        """
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                json.dump(explanation, f, indent=2, ensure_ascii=False)
            return output_path
        except Exception as e:
            raise Exception(f"Failed to save explanation: {str(e)}")


def main():
    """Example usage of the CodeExplainer."""
    
    # Example code snippet
    example_code = """
def fibonacci(n):
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

# Test the function
for i in range(10):
    print(f"F({i}) = {fibonacci(i)}")
"""
    
    try:
        # Initialize the explainer
        explainer = CodeExplainer()
        
        # Generate explanation
        print("Generating explanation...")
        explanation = explainer.explain_code(example_code, language="Python", difficulty_level="beginner")
        
        # Save to file
        output_file = explainer.save_explanation(explanation, "fibonacci_explanation.json")
        print(f"Explanation saved to: {output_file}")
        
        # Print key parts
        print(f"\nTitle: {explanation['title']}")
        print(f"Overview: {explanation['overview']}")
        print(f"\nNarration Script Preview:")
        print(explanation['narration_script'][:200] + "...")
        
    except Exception as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    main() 